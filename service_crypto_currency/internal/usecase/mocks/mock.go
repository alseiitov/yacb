// Code generated by MockGen. DO NOT EDIT.
// Source: service_crypto_currency/internal/usecase/interfaces.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"
	time "time"

	entity "github.com/alseiitov/yacb/service_crypto_currency/internal/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockCryptoCurrency is a mock of CryptoCurrency interface.
type MockCryptoCurrency struct {
	ctrl     *gomock.Controller
	recorder *MockCryptoCurrencyMockRecorder
}

// MockCryptoCurrencyMockRecorder is the mock recorder for MockCryptoCurrency.
type MockCryptoCurrencyMockRecorder struct {
	mock *MockCryptoCurrency
}

// NewMockCryptoCurrency creates a new mock instance.
func NewMockCryptoCurrency(ctrl *gomock.Controller) *MockCryptoCurrency {
	mock := &MockCryptoCurrency{ctrl: ctrl}
	mock.recorder = &MockCryptoCurrencyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCryptoCurrency) EXPECT() *MockCryptoCurrencyMockRecorder {
	return m.recorder
}

// GetCryptoCurrencies mocks base method.
func (m *MockCryptoCurrency) GetCryptoCurrencies(ctx context.Context) ([]entity.CryptoCurrency, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCryptoCurrencies", ctx)
	ret0, _ := ret[0].([]entity.CryptoCurrency)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCryptoCurrencies indicates an expected call of GetCryptoCurrencies.
func (mr *MockCryptoCurrencyMockRecorder) GetCryptoCurrencies(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCryptoCurrencies", reflect.TypeOf((*MockCryptoCurrency)(nil).GetCryptoCurrencies), ctx)
}

// MockCryptoCurrencyRepo is a mock of CryptoCurrencyRepo interface.
type MockCryptoCurrencyRepo struct {
	ctrl     *gomock.Controller
	recorder *MockCryptoCurrencyRepoMockRecorder
}

// MockCryptoCurrencyRepoMockRecorder is the mock recorder for MockCryptoCurrencyRepo.
type MockCryptoCurrencyRepoMockRecorder struct {
	mock *MockCryptoCurrencyRepo
}

// NewMockCryptoCurrencyRepo creates a new mock instance.
func NewMockCryptoCurrencyRepo(ctrl *gomock.Controller) *MockCryptoCurrencyRepo {
	mock := &MockCryptoCurrencyRepo{ctrl: ctrl}
	mock.recorder = &MockCryptoCurrencyRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCryptoCurrencyRepo) EXPECT() *MockCryptoCurrencyRepoMockRecorder {
	return m.recorder
}

// GetCryptoCurrencies mocks base method.
func (m *MockCryptoCurrencyRepo) GetCryptoCurrencies(ctx context.Context) ([]entity.CryptoCurrency, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCryptoCurrencies", ctx)
	ret0, _ := ret[0].([]entity.CryptoCurrency)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCryptoCurrencies indicates an expected call of GetCryptoCurrencies.
func (mr *MockCryptoCurrencyRepoMockRecorder) GetCryptoCurrencies(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCryptoCurrencies", reflect.TypeOf((*MockCryptoCurrencyRepo)(nil).GetCryptoCurrencies), ctx)
}

// MockRate is a mock of Rate interface.
type MockRate struct {
	ctrl     *gomock.Controller
	recorder *MockRateMockRecorder
}

// MockRateMockRecorder is the mock recorder for MockRate.
type MockRateMockRecorder struct {
	mock *MockRate
}

// NewMockRate creates a new mock instance.
func NewMockRate(ctrl *gomock.Controller) *MockRate {
	mock := &MockRate{ctrl: ctrl}
	mock.recorder = &MockRateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRate) EXPECT() *MockRateMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRate) Create(ctx context.Context, rate entity.Rate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, rate)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockRateMockRecorder) Create(ctx, rate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRate)(nil).Create), ctx, rate)
}

// GetCurrentRate mocks base method.
func (m *MockRate) GetCurrentRate(ctx context.Context, symbol string) (entity.Rate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentRate", ctx, symbol)
	ret0, _ := ret[0].(entity.Rate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentRate indicates an expected call of GetCurrentRate.
func (mr *MockRateMockRecorder) GetCurrentRate(ctx, symbol interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentRate", reflect.TypeOf((*MockRate)(nil).GetCurrentRate), ctx, symbol)
}

// GetRateChange mocks base method.
func (m *MockRate) GetRateChange(ctx context.Context, symbol string, period time.Duration) (entity.RateChange, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRateChange", ctx, symbol, period)
	ret0, _ := ret[0].(entity.RateChange)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRateChange indicates an expected call of GetRateChange.
func (mr *MockRateMockRecorder) GetRateChange(ctx, symbol, period interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRateChange", reflect.TypeOf((*MockRate)(nil).GetRateChange), ctx, symbol, period)
}

// RunRatesParser mocks base method.
func (m *MockRate) RunRatesParser() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunRatesParser")
	ret0, _ := ret[0].(error)
	return ret0
}

// RunRatesParser indicates an expected call of RunRatesParser.
func (mr *MockRateMockRecorder) RunRatesParser() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunRatesParser", reflect.TypeOf((*MockRate)(nil).RunRatesParser))
}

// MockRateRepo is a mock of RateRepo interface.
type MockRateRepo struct {
	ctrl     *gomock.Controller
	recorder *MockRateRepoMockRecorder
}

// MockRateRepoMockRecorder is the mock recorder for MockRateRepo.
type MockRateRepoMockRecorder struct {
	mock *MockRateRepo
}

// NewMockRateRepo creates a new mock instance.
func NewMockRateRepo(ctrl *gomock.Controller) *MockRateRepo {
	mock := &MockRateRepo{ctrl: ctrl}
	mock.recorder = &MockRateRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRateRepo) EXPECT() *MockRateRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRateRepo) Create(ctx context.Context, rate entity.Rate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, rate)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockRateRepoMockRecorder) Create(ctx, rate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRateRepo)(nil).Create), ctx, rate)
}

// GetRateByDate mocks base method.
func (m *MockRateRepo) GetRateByDate(ctx context.Context, symbol string, datetime time.Time) (entity.Rate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRateByDate", ctx, symbol, datetime)
	ret0, _ := ret[0].(entity.Rate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRateByDate indicates an expected call of GetRateByDate.
func (mr *MockRateRepoMockRecorder) GetRateByDate(ctx, symbol, datetime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRateByDate", reflect.TypeOf((*MockRateRepo)(nil).GetRateByDate), ctx, symbol, datetime)
}

// MockRateClient is a mock of RateClient interface.
type MockRateClient struct {
	ctrl     *gomock.Controller
	recorder *MockRateClientMockRecorder
}

// MockRateClientMockRecorder is the mock recorder for MockRateClient.
type MockRateClientMockRecorder struct {
	mock *MockRateClient
}

// NewMockRateClient creates a new mock instance.
func NewMockRateClient(ctrl *gomock.Controller) *MockRateClient {
	mock := &MockRateClient{ctrl: ctrl}
	mock.recorder = &MockRateClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRateClient) EXPECT() *MockRateClientMockRecorder {
	return m.recorder
}

// GetCurrentRate mocks base method.
func (m *MockRateClient) GetCurrentRate(ctx context.Context, symbol string) (entity.Rate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentRate", ctx, symbol)
	ret0, _ := ret[0].(entity.Rate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentRate indicates an expected call of GetCurrentRate.
func (mr *MockRateClientMockRecorder) GetCurrentRate(ctx, symbol interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentRate", reflect.TypeOf((*MockRateClient)(nil).GetCurrentRate), ctx, symbol)
}
