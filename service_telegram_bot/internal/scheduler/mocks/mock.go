// Code generated by MockGen. DO NOT EDIT.
// Source: service_telegram_bot/internal/scheduler/scheduler.go

// Package mock_scheduler is a generated GoMock package.
package mock_scheduler

import (
	context "context"
	reflect "reflect"
	time "time"

	entity "github.com/alseiitov/yacb/service_telegram_bot/internal/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockScheduler is a mock of Scheduler interface.
type MockScheduler struct {
	ctrl     *gomock.Controller
	recorder *MockSchedulerMockRecorder
}

// MockSchedulerMockRecorder is the mock recorder for MockScheduler.
type MockSchedulerMockRecorder struct {
	mock *MockScheduler
}

// NewMockScheduler creates a new mock instance.
func NewMockScheduler(ctrl *gomock.Controller) *MockScheduler {
	mock := &MockScheduler{ctrl: ctrl}
	mock.recorder = &MockSchedulerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScheduler) EXPECT() *MockSchedulerMockRecorder {
	return m.recorder
}

// AddSubscription mocks base method.
func (m *MockScheduler) AddSubscription(sub entity.Subscription) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddSubscription", sub)
}

// AddSubscription indicates an expected call of AddSubscription.
func (mr *MockSchedulerMockRecorder) AddSubscription(sub interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSubscription", reflect.TypeOf((*MockScheduler)(nil).AddSubscription), sub)
}

// AddSubscriptions mocks base method.
func (m *MockScheduler) AddSubscriptions(subs ...entity.Subscription) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range subs {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddSubscriptions", varargs...)
}

// AddSubscriptions indicates an expected call of AddSubscriptions.
func (mr *MockSchedulerMockRecorder) AddSubscriptions(subs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSubscriptions", reflect.TypeOf((*MockScheduler)(nil).AddSubscriptions), subs...)
}

// DeleteSubscription mocks base method.
func (m *MockScheduler) DeleteSubscription(id int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteSubscription", id)
}

// DeleteSubscription indicates an expected call of DeleteSubscription.
func (mr *MockSchedulerMockRecorder) DeleteSubscription(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSubscription", reflect.TypeOf((*MockScheduler)(nil).DeleteSubscription), id)
}

// Run mocks base method.
func (m *MockScheduler) Run(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Run", ctx)
}

// Run indicates an expected call of Run.
func (mr *MockSchedulerMockRecorder) Run(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockScheduler)(nil).Run), ctx)
}

// MockCryptoCurrencyClient is a mock of CryptoCurrencyClient interface.
type MockCryptoCurrencyClient struct {
	ctrl     *gomock.Controller
	recorder *MockCryptoCurrencyClientMockRecorder
}

// MockCryptoCurrencyClientMockRecorder is the mock recorder for MockCryptoCurrencyClient.
type MockCryptoCurrencyClientMockRecorder struct {
	mock *MockCryptoCurrencyClient
}

// NewMockCryptoCurrencyClient creates a new mock instance.
func NewMockCryptoCurrencyClient(ctrl *gomock.Controller) *MockCryptoCurrencyClient {
	mock := &MockCryptoCurrencyClient{ctrl: ctrl}
	mock.recorder = &MockCryptoCurrencyClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCryptoCurrencyClient) EXPECT() *MockCryptoCurrencyClientMockRecorder {
	return m.recorder
}

// GetRateChange mocks base method.
func (m *MockCryptoCurrencyClient) GetRateChange(ctx context.Context, symbol string, period time.Duration) (entity.RateChange, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRateChange", ctx, symbol, period)
	ret0, _ := ret[0].(entity.RateChange)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRateChange indicates an expected call of GetRateChange.
func (mr *MockCryptoCurrencyClientMockRecorder) GetRateChange(ctx, symbol, period interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRateChange", reflect.TypeOf((*MockCryptoCurrencyClient)(nil).GetRateChange), ctx, symbol, period)
}
